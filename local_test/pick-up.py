"""Vehicle Routing Problem"""
from __future__ import print_function
from six.moves import xrange
from ortools.constraint_solver import pywrapcp
from ortools.constraint_solver import routing_enums_pb2

#time for tester
import time

import csv
import random
import math
import json

import data_problem
import pickup_constraints
import printer

def return_lambda_gateway_response(code, body):
    """
    This function wraps around the endpoint responses in a uniform and Lambda-friendly way
    :param code: HTTP response code (200 for OK), must be an int
    :param body: the actual content of the response
    """
    return {"statusCode": code, "body": json.dumps(body)}

###########################
# Problem Data Definition #
###########################

# test_300 = {
#     "points": [[10.777996, 106.702069, 0], [10.760551, 106.674746, 1], [10.784789, 106.644823, 1], [10.798254, 106.751791, 1], [10.816109, 106.669295, 1], [10.772456, 106.664881, 1], [10.769162, 106.696997, 1], [10.864858, 106.683749, 1], [10.790107, 106.720561, 1], [10.757434, 106.694729, 1], [10.795161, 106.719594, 1], [10.798385, 106.695269, 1], [10.79227, 106.654518, 1], [10.795269, 106.701586, 1], [10.767407, 106.641027, 1], [10.806281, 106.571058, 1], [10.729387, 106.726431, 1], [10.840673, 106.650483, 1], [10.876962, 106.6429, 1], [10.768695, 106.68064, 1], [10.747914, 106.669036, 1], [10.77142, 106.652953, 1], [10.765462, 106.662946, 1], [10.771312, 106.70039, 1], [10.753656, 106.647321, 1], [10.762599, 106.687925, 1], [10.802423, 106.732668, 1], [10.784827, 106.688579, 1], [10.763318, 106.677517, 1], [10.835041, 106.687098, 1], [10.775041, 106.670828, 1], [10.752945, 106.662138, 1], [10.780728, 106.689865, 1], [10.730083, 106.705849, 1], [10.825847, 106.690042, 1], [10.754379, 106.691953, 1], [10.758714, 106.700882, 1], [10.761559, 106.656239, 1], [10.765606, 106.670859, 1], [10.795782, 106.692653, 1], [10.818343, 106.566965, 1], [10.776459, 106.677361, 1], [10.78856, 106.770657, 1], [10.774102, 106.688587, 1], [10.79838, 106.660199, 1], [10.777899, 106.680975, 1], [10.727517, 106.67675, 1], [10.759002, 106.688086, 1], [10.780731, 106.670705, 1], [10.782805, 106.660796, 1], [10.752199, 106.655333, 1], [10.808873, 106.670435, 1], [10.736463, 106.730862, 1], [10.767792, 106.691716, 1], [10.75418, 106.68125, 1], [10.757164, 106.670898, 1], [10.767186, 106.703489, 1], [10.773453, 106.703822, 1], [10.79219, 106.678196, 1], [10.750311, 106.643577, 1], [10.751667, 106.654305, 1], [10.768958, 106.652784, 1], [10.795999, 106.683155, 1], [10.834114, 106.728163, 1], [10.765867, 106.66387, 1], [10.740059, 106.617809, 1], [10.765898, 106.691126, 1], [10.791943, 106.644197, 1], [10.863217, 106.762197, 1], [10.797119, 106.710693, 1], [10.803279, 106.657625, 1], [10.794996, 106.674872, 1], [10.769789, 106.682251, 1], [10.738243, 106.715297, 1], [10.770789, 106.6437, 1], [10.836675, 106.657606, 1], [10.7761, 106.684302, 1], [10.755461, 106.695683, 1], [10.826455, 106.610949, 1], [10.771988, 106.703706, 1], [10.740247, 106.671355, 1], [10.806196, 106.706869, 1], [10.805328, 106.715737, 1], [10.807707, 106.644944, 1], [10.780186, 106.651045, 1], [10.764514, 106.68528, 1], [10.778296, 106.689573, 1], [10.772457, 106.695947, 1], [10.783942, 106.665608, 1], [10.754981, 106.690938, 1], [10.71692, 106.703885, 1], [10.776641, 106.690048, 1], [10.786144, 106.671366, 1], [10.761241, 106.652083, 1], [10.797273, 106.680388, 1], [10.757109, 106.65839, 1], [10.793324, 106.687209, 1], [10.874298, 106.604144, 1], [10.774195, 106.678469, 1], [10.79838, 106.660199, 1], [10.794623, 106.629864, 1], [10.768803, 106.685824, 1], [10.762844, 106.647319, 1], [10.785155, 106.650821, 1], [10.760501, 106.679613, 1], [10.796401, 106.690539, 1], [10.771557, 106.705818, 1], [10.792164, 106.666947, 1], [10.772572, 106.702073, 1], [10.788539, 106.637063, 1], [10.772251, 106.68397, 1], [10.790563, 106.678237, 1], [10.791753, 106.642768, 1], [10.79459, 106.67974, 1], [10.729084, 106.718873, 1], [10.800173, 106.647716, 1], [10.809274, 106.608416, 1], [10.729346, 106.724008, 1], [10.759183, 106.705267, 1], [10.740992, 106.700638, 1], [10.759183, 106.705267, 1], [10.844338, 106.641599, 1], [10.787659, 106.687747, 1], [10.775041, 106.670828, 1], [10.758472, 106.700199, 1], [10.800509, 106.641609, 1], [10.786791, 106.681755, 1], [10.796743, 106.686803, 1], [10.755686, 106.645701, 1], [10.759411, 106.705006, 1], [10.757187, 106.684124, 1], [10.771988, 106.703706, 1], [10.751821, 106.647534, 1], [10.790147, 106.672119, 1], [10.756955, 106.668874, 1], [10.768089, 106.617655, 1], [10.763192, 106.689088, 1], [10.79972, 106.675467, 1], [10.80659, 106.694984, 1], [10.768287, 106.650966, 1], [10.789671, 106.680072, 1], [10.756275, 106.650534, 1], [10.665686, 106.571757, 1], [10.810857, 106.70297, 1], [10.737922, 106.614648, 1], [10.804705, 106.692109, 1], [10.865739, 106.727819, 1], [10.813935, 106.717072, 1], [10.771244, 106.659096, 1], [10.791255, 106.688097, 1], [10.800388, 106.718364, 1], [10.836433, 106.617512, 1], [10.775547, 106.701057, 1], [10.759518, 106.679808, 1], [10.827226, 106.600419, 1], [10.780822, 106.654069, 1], [10.784906, 106.621261, 1], [10.751393, 106.675979, 1], [10.796268, 106.696444, 1], [10.764406, 106.678308, 1], [10.796422, 106.629353, 1], [10.780669, 106.670646, 1], [10.771988, 106.703706, 1], [10.754371, 106.72146, 1], [10.812453, 106.689959, 1], [10.788077, 106.684008, 1], [10.768148, 106.615058, 1], [10.722491, 106.712463, 1], [10.82958, 106.637075, 1], [10.790565, 106.689401, 1], [10.766569, 106.667038, 1], [10.820423, 106.631091, 1], [10.726437, 106.711675, 1], [10.798385, 106.695269, 1], [10.797289, 106.65742, 1], [10.733725, 106.670989, 1], [10.788276, 106.682042, 1], [10.836603, 106.687871, 1], [10.765856, 106.704776, 1], [10.750311, 106.643577, 1], [10.747755, 106.634476, 1], [10.79231, 106.662411, 1], [10.787824, 106.602584, 1], [10.806619, 106.698824, 1], [10.757217, 106.651492, 1], [10.770789, 106.6437, 1], [10.772951, 106.687193, 1], [10.814686, 106.670272, 1], [10.822628, 106.632234, 1], [10.796495, 106.663395, 1], [10.755284, 106.626546, 1], [10.849091, 106.649975, 1], [10.767879, 106.693582, 1], [10.81642, 106.669803, 1], [10.815319, 106.674348, 1], [10.817428, 106.693855, 1], [10.779683, 106.695498, 1], [10.776078, 106.680435, 1], [10.766163, 106.617142, 1], [10.85171, 106.725464, 1], [10.707293, 106.727933, 1], [10.754749, 106.586389, 1], [10.806804, 106.646642, 1], [10.785334, 106.69559, 1], [10.751606, 106.663437, 1], [10.749803, 106.624618, 1], [10.814833, 106.672327, 1], [10.793234, 106.703527, 1], [10.834012, 106.66417, 1], [10.788914, 106.676312, 1], [10.808873, 106.670435, 1], [10.802363, 106.640181, 1], [10.867428, 106.621092, 1], [10.787103, 106.674398, 1], [10.795161, 106.719594, 1], [10.813936, 106.717074, 1], [10.790778, 106.69658, 1], [10.798314, 106.692031, 1], [10.805103, 106.683018, 1], [10.715959, 106.740329, 1], [10.772151, 106.678618, 1], [10.808627, 106.674969, 1], [10.768084, 106.691693, 1], [10.79972, 106.675467, 1], [10.789042, 106.690896, 1], [10.795266, 106.640775, 1], [10.791572, 106.709008, 1], [10.760856, 106.642748, 1], [10.766822, 106.687481, 1], [10.797886, 106.68103, 1], [10.791998, 106.711469, 1], [10.841124, 106.677931, 1], [10.799503, 106.658702, 1], [10.799953, 106.730107, 1], [10.841941, 106.647452, 1], [10.772499, 106.686381, 1], [10.801666, 106.6391, 1], [10.802017, 106.649517, 1], [10.772296, 106.685161, 1], [10.79748, 106.659504, 1], [10.773581, 106.702345, 1], [10.750417, 106.674286, 1], [10.774343, 106.700402, 1], [10.828005, 106.675326, 1], [10.789917, 106.730063, 1], [10.769159, 106.634194, 1], [10.767407, 106.641027, 1], [10.781173, 106.675097, 1], [10.776842, 106.633905, 1], [10.771733, 106.676914, 1], [10.795478, 106.719256, 1], [10.768888, 106.666099, 1], [10.754124, 106.682345, 1], [10.79838, 106.660199, 1], [10.770273, 106.688425, 1], [10.756925, 106.684734, 1], [10.79576, 106.652097, 1], [10.859302, 106.690074, 1], [10.801583, 106.712186, 1], [10.796664, 106.640482, 1], [10.766334, 106.682275, 1], [10.790629, 106.657806, 1], [10.799399, 106.75031, 1], [10.782106, 106.672758, 1], [10.792454, 106.70155, 1], [10.846574, 106.65585, 1], [10.780281, 106.663659, 1], [10.756417, 106.669487, 1], [10.780728, 106.689865, 1], [10.816736, 106.707301, 1], [10.783942, 106.665608, 1], [10.788944, 106.682697, 1], [10.812686, 106.689901, 1], [10.797928, 106.673185, 1], [10.76309, 106.66918, 1], [10.764476, 106.661491, 1], [10.778649, 106.692574, 1], [10.796686, 106.630772, 1], [10.759788, 106.5966, 1], [10.769953, 106.684549, 1], [10.838845, 106.7887, 1], [10.786003, 106.675741, 1], [10.798667, 106.705152, 1], [10.737922, 106.614648, 1], [10.806857, 106.640889, 1], [10.802423, 106.732668, 1], [10.772596, 106.668798, 1], [10.798241, 106.703955, 1], [10.792834, 106.696065, 1], [10.770302, 106.687757, 1], [10.770334, 106.687204, 1], [10.756529, 106.66713, 1], [10.79843, 106.719368, 1], [10.82269, 106.639492, 1], [10.779712, 106.635861, 1], [10.791073, 106.670851, 1], [10.74634, 106.674372, 1], [10.849445, 106.678617, 1], [10.803224, 106.715623, 1], [10.788438, 106.678386, 1]],
#     "vehicle_nums": 25,
#     "min_parcels": 15,
#     "max_distance": 30000,
#     "min_vehicles": False
# }

test_300 = {
    "points": [[10.777996, 106.702069, 0], [10.760551, 106.674746, 1], [10.784789, 106.644823, 1], [10.798254, 106.751791, 1], [10.816109, 106.669295, 1], [10.772456, 106.664881, 1], [10.769162, 106.696997, 1], [10.864858, 106.683749, 1], [10.790107, 106.720561, 1], [10.757434, 106.694729, 1], [10.795161, 106.719594, 1], [10.798385, 106.695269, 1], [10.79227, 106.654518, 1], [10.795269, 106.701586, 1], [10.767407, 106.641027, 1], [10.806281, 106.571058, 1], [10.729387, 106.726431, 1], [10.840673, 106.650483, 1], [10.876962, 106.6429, 1], [10.768695, 106.68064, 1], [10.747914, 106.669036, 1], [10.77142, 106.652953, 1], [10.765462, 106.662946, 1], [10.771312, 106.70039, 1], [10.753656, 106.647321, 1], [10.762599, 106.687925, 1], [10.802423, 106.732668, 1], [10.784827, 106.688579, 1], [10.763318, 106.677517, 1], [10.835041, 106.687098, 1], [10.775041, 106.670828, 1], [10.752945, 106.662138, 1], [10.780728, 106.689865, 1], [10.730083, 106.705849, 1], [10.825847, 106.690042, 1], [10.754379, 106.691953, 1], [10.758714, 106.700882, 1], [10.761559, 106.656239, 1], [10.765606, 106.670859, 1], [10.795782, 106.692653, 1], [10.818343, 106.566965, 1], [10.776459, 106.677361, 1], [10.78856, 106.770657, 1], [10.774102, 106.688587, 1], [10.79838, 106.660199, 1], [10.777899, 106.680975, 1], [10.727517, 106.67675, 1], [10.759002, 106.688086, 1], [10.780731, 106.670705, 1], [10.782805, 106.660796, 1], [10.752199, 106.655333, 1], [10.808873, 106.670435, 1], [10.736463, 106.730862, 1], [10.767792, 106.691716, 1], [10.75418, 106.68125, 1], [10.757164, 106.670898, 1], [10.767186, 106.703489, 1], [10.773453, 106.703822, 1], [10.79219, 106.678196, 1], [10.750311, 106.643577, 1], [10.751667, 106.654305, 1], [10.768958, 106.652784, 1], [10.795999, 106.683155, 1], [10.834114, 106.728163, 1], [10.765867, 106.66387, 1], [10.740059, 106.617809, 1], [10.765898, 106.691126, 1], [10.791943, 106.644197, 1], [10.863217, 106.762197, 1], [10.797119, 106.710693, 1], [10.803279, 106.657625, 1], [10.794996, 106.674872, 1], [10.769789, 106.682251, 1], [10.738243, 106.715297, 1], [10.770789, 106.6437, 1], [10.836675, 106.657606, 1], [10.7761, 106.684302, 1], [10.755461, 106.695683, 1], [10.826455, 106.610949, 1], [10.771988, 106.703706, 1], [10.740247, 106.671355, 1], [10.806196, 106.706869, 1], [10.805328, 106.715737, 1], [10.807707, 106.644944, 1], [10.780186, 106.651045, 1], [10.764514, 106.68528, 1], [10.778296, 106.689573, 1], [10.772457, 106.695947, 1], [10.783942, 106.665608, 1], [10.754981, 106.690938, 1], [10.71692, 106.703885, 1], [10.776641, 106.690048, 1], [10.786144, 106.671366, 1], [10.761241, 106.652083, 1], [10.797273, 106.680388, 1], [10.757109, 106.65839, 1], [10.793324, 106.687209, 1], [10.874298, 106.604144, 1], [10.774195, 106.678469, 1], [10.79838, 106.660199, 1], [10.794623, 106.629864, 1], [10.768803, 106.685824, 1], [10.762844, 106.647319, 1], [10.785155, 106.650821, 1], [10.760501, 106.679613, 1], [10.796401, 106.690539, 1], [10.771557, 106.705818, 1], [10.792164, 106.666947, 1], [10.772572, 106.702073, 1], [10.788539, 106.637063, 1], [10.772251, 106.68397, 1], [10.790563, 106.678237, 1], [10.791753, 106.642768, 1], [10.79459, 106.67974, 1], [10.729084, 106.718873, 1], [10.800173, 106.647716, 1], [10.809274, 106.608416, 1], [10.729346, 106.724008, 1], [10.759183, 106.705267, 1], [10.740992, 106.700638, 1], [10.759183, 106.705267, 1], [10.844338, 106.641599, 1], [10.787659, 106.687747, 1], [10.775041, 106.670828, 1], [10.758472, 106.700199, 1], [10.800509, 106.641609, 1], [10.786791, 106.681755, 1], [10.796743, 106.686803, 1], [10.755686, 106.645701, 1], [10.759411, 106.705006, 1], [10.757187, 106.684124, 1], [10.771988, 106.703706, 1], [10.751821, 106.647534, 1], [10.790147, 106.672119, 1], [10.756955, 106.668874, 1], [10.768089, 106.617655, 1], [10.763192, 106.689088, 1], [10.79972, 106.675467, 1], [10.80659, 106.694984, 1], [10.768287, 106.650966, 1], [10.789671, 106.680072, 1], [10.756275, 106.650534, 1], [10.665686, 106.571757, 1], [10.810857, 106.70297, 1], [10.737922, 106.614648, 1], [10.804705, 106.692109, 1], [10.865739, 106.727819, 1], [10.813935, 106.717072, 1], [10.771244, 106.659096, 1], [10.791255, 106.688097, 1], [10.800388, 106.718364, 1], [10.836433, 106.617512, 1], [10.775547, 106.701057, 1], [10.759518, 106.679808, 1], [10.827226, 106.600419, 1], [10.780822, 106.654069, 1], [10.784906, 106.621261, 1], [10.751393, 106.675979, 1], [10.796268, 106.696444, 1], [10.764406, 106.678308, 1], [10.796422, 106.629353, 1], [10.780669, 106.670646, 1], [10.771988, 106.703706, 1], [10.754371, 106.72146, 1], [10.812453, 106.689959, 1], [10.788077, 106.684008, 1], [10.768148, 106.615058, 1], [10.722491, 106.712463, 1], [10.82958, 106.637075, 1], [10.790565, 106.689401, 1], [10.766569, 106.667038, 1], [10.820423, 106.631091, 1], [10.726437, 106.711675, 1], [10.798385, 106.695269, 1], [10.797289, 106.65742, 1], [10.733725, 106.670989, 1], [10.788276, 106.682042, 1], [10.836603, 106.687871, 1], [10.765856, 106.704776, 1], [10.750311, 106.643577, 1], [10.747755, 106.634476, 1], [10.79231, 106.662411, 1], [10.787824, 106.602584, 1], [10.806619, 106.698824, 1], [10.757217, 106.651492, 1], [10.770789, 106.6437, 1], [10.772951, 106.687193, 1], [10.814686, 106.670272, 1], [10.822628, 106.632234, 1], [10.796495, 106.663395, 1], [10.755284, 106.626546, 1], [10.849091, 106.649975, 1], [10.767879, 106.693582, 1], [10.81642, 106.669803, 1], [10.815319, 106.674348, 1], [10.817428, 106.693855, 1], [10.779683, 106.695498, 1], [10.776078, 106.680435, 1], [10.766163, 106.617142, 1], [10.85171, 106.725464, 1], [10.707293, 106.727933, 1], [10.754749, 106.586389, 1], [10.806804, 106.646642, 1], [10.785334, 106.69559, 1], [10.751606, 106.663437, 1], [10.749803, 106.624618, 1], [10.814833, 106.672327, 1], [10.793234, 106.703527, 1], [10.834012, 106.66417, 1], [10.788914, 106.676312, 1], [10.808873, 106.670435, 1], [10.802363, 106.640181, 1], [10.867428, 106.621092, 1], [10.787103, 106.674398, 1], [10.795161, 106.719594, 1], [10.813936, 106.717074, 1], [10.790778, 106.69658, 1], [10.798314, 106.692031, 1], [10.805103, 106.683018, 1], [10.715959, 106.740329, 1], [10.772151, 106.678618, 1], [10.808627, 106.674969, 1], [10.768084, 106.691693, 1], [10.79972, 106.675467, 1], [10.789042, 106.690896, 1], [10.795266, 106.640775, 1], [10.791572, 106.709008, 1], [10.760856, 106.642748, 1], [10.766822, 106.687481, 1], [10.797886, 106.68103, 1], [10.791998, 106.711469, 1], [10.841124, 106.677931, 1], [10.799503, 106.658702, 1], [10.799953, 106.730107, 1], [10.841941, 106.647452, 1], [10.772499, 106.686381, 1], [10.801666, 106.6391, 1], [10.802017, 106.649517, 1], [10.772296, 106.685161, 1], [10.79748, 106.659504, 1], [10.773581, 106.702345, 1], [10.750417, 106.674286, 1], [10.774343, 106.700402, 1], [10.828005, 106.675326, 1], [10.789917, 106.730063, 1], [10.769159, 106.634194, 1], [10.767407, 106.641027, 1], [10.781173, 106.675097, 1], [10.776842, 106.633905, 1], [10.771733, 106.676914, 1], [10.795478, 106.719256, 1], [10.768888, 106.666099, 1], [10.754124, 106.682345, 1], [10.79838, 106.660199, 1], [10.770273, 106.688425, 1], [10.756925, 106.684734, 1], [10.79576, 106.652097, 1], [10.859302, 106.690074, 1], [10.801583, 106.712186, 1], [10.796664, 106.640482, 1], [10.766334, 106.682275, 1], [10.790629, 106.657806, 1], [10.799399, 106.75031, 1], [10.782106, 106.672758, 1], [10.792454, 106.70155, 1], [10.846574, 106.65585, 1], [10.780281, 106.663659, 1], [10.756417, 106.669487, 1], [10.780728, 106.689865, 1], [10.816736, 106.707301, 1], [10.783942, 106.665608, 1], [10.788944, 106.682697, 1], [10.812686, 106.689901, 1], [10.797928, 106.673185, 1], [10.76309, 106.66918, 1], [10.764476, 106.661491, 1], [10.778649, 106.692574, 1], [10.796686, 106.630772, 1], [10.759788, 106.5966, 1], [10.769953, 106.684549, 1], [10.838845, 106.7887, 1], [10.786003, 106.675741, 1], [10.798667, 106.705152, 1], [10.737922, 106.614648, 1], [10.806857, 106.640889, 1], [10.802423, 106.732668, 1], [10.772596, 106.668798, 1], [10.798241, 106.703955, 1], [10.792834, 106.696065, 1], [10.770302, 106.687757, 1], [10.770334, 106.687204, 1], [10.756529, 106.66713, 1], [10.79843, 106.719368, 1], [10.82269, 106.639492, 1], [10.779712, 106.635861, 1], [10.791073, 106.670851, 1], [10.74634, 106.674372, 1], [10.849445, 106.678617, 1], [10.803224, 106.715623, 1], [10.788438, 106.678386, 1]],
    "vehicle_num": 20,
    #"min_parcels": 7,
    "max_distance": 50000,
    "min_vehicles": True,
  "transport_mode": "1N"
}

test_100 = {
    "points": [[10.729461, 106.714041, 1], [10.823866, 106.5643, 1], [10.79944, 106.647973, 1], [10.814017, 106.620823, 1], [10.731643, 106.738308, 1], [10.762599, 106.687925, 1], [10.775522, 106.662882, 1], [10.802723, 106.692658, 1], [10.744354, 106.711855, 1], [10.850008, 106.758743, 1], [10.780519, 106.707268, 1], [10.748424, 106.636702, 1], [10.806455, 106.681468, 1], [10.754666, 106.689363, 1], [10.758743, 106.670432, 1], [10.820834, 106.689434, 1], [10.800979, 106.712649, 1], [10.800279, 106.609387, 1], [10.741001, 106.725929, 1], [10.750331, 106.679101, 1], [10.79668, 106.658022, 1], [10.762186, 106.668393, 1], [10.778365, 106.680896, 1], [10.771231, 106.689969, 1], [10.798319, 106.693211, 1], [10.767895, 106.688581, 1], [10.795009, 106.643572, 1], [10.788437, 106.765777, 1], [10.826968, 106.67886, 1], [10.779935, 106.69516, 1], [10.775864, 106.634517, 1], [10.772158, 106.6694, 1], [10.865188, 106.613091, 1], [10.729346, 106.724008, 1], [10.758868, 106.641151, 1], [10.804648, 106.638839, 1], [10.809129, 106.623127, 1], [10.808921, 106.693806, 1], [10.770099, 106.675264, 1], [10.778296, 106.689573, 1], [10.844042, 106.681619, 1], [10.768287, 106.650966, 1], [10.768056, 106.697908, 1], [10.768287, 106.650966, 1], [10.806934, 106.638023, 1], [10.816738, 106.707299, 1], [10.781411, 106.700665, 1], [10.795732, 106.629417, 1], [10.81447, 106.632585, 1], [10.771316, 106.674337, 1], [10.848241, 106.65811, 1], [10.798513, 106.661119, 1], [10.813909, 106.728877, 1], [10.81642, 106.669803, 1], [10.789646, 106.658173, 1], [10.856459, 106.656223, 1], [10.808417, 106.71568, 1], [10.756668, 106.662223, 1], [10.766861, 106.667155, 1], [10.746556, 106.650745, 1], [10.799058, 106.67915, 1], [10.790942, 106.66273, 1], [10.789196, 106.629526, 1], [10.805357, 106.627313, 1], [10.754124, 106.682345, 1], [10.754796, 106.681392, 1], [10.77827, 106.689555, 1], [10.804765, 106.679195, 1], [10.789317, 106.711883, 1], [10.810853, 106.70084, 1], [10.792975, 106.684736, 1], [10.871146, 106.646462, 1], [10.810716, 106.712404, 1], [10.761701, 106.669916, 1], [10.784062, 106.684159, 1], [10.833191, 106.682354, 1], [10.751593, 106.698112, 1], [10.752842, 106.629677, 1], [10.727435, 106.624663, 1], [10.749648, 106.688812, 1], [10.796834, 106.691267, 1], [10.744594, 106.734553, 1], [10.767217, 106.676145, 1], [10.777651, 106.655916, 1], [10.797289, 106.65742, 1], [10.763466, 106.677676, 1], [10.809293, 106.696336, 1], [10.801942, 106.71812, 1], [10.732435, 106.646739, 1], [10.763993, 106.66923, 1], [10.789123, 106.67303, 1], [10.774195, 106.678469, 1], [10.794409, 106.709557, 1], [10.791761, 106.694682, 1], [10.793501, 106.690105, 1], [10.802234, 106.642131, 1], [10.760518, 106.701964, 1], [10.820097, 106.683179, 1], [10.806049, 106.632269, 1], [10.784069, 106.642595, 1]],
    "vehicle_num": 10,
    "min_parcels": 5,
    "max_distance": 20000,
    "min_vehicles": True
}

test_20 = {
    "points": [[10.773687, 106.703263, 0], [10.731158, 106.716759, 1], [10.729461, 106.714041, 1], [10.768337, 106.700743, 1], [10.827278, 106.678072, 1], [10.772264, 106.681347, 1], [10.786769, 106.640134, 1], [10.875387, 106.755127, 1], [10.808667, 106.711705, 1], [10.774575, 106.705748, 1], [10.827971, 106.727006, 1], [10.770907, 106.6681, 1], [10.769285, 106.674728, 1], [10.737721, 106.675189, 1], [10.786519, 106.693997, 1], [10.798453, 106.667866, 1], [10.772691, 106.693676, 1], [10.783066, 106.695901, 1], [10.754833, 106.66052, 1], [10.770541, 106.703162, 1]],
    "vehicle_num": 10,
    "min_vehicles": True,
    "max_parcels": 10,
  "transport_mode": "1N",
  "distance_calculation": "OSRM"
}

def get_routing_assignment(data, routing, assignment, distance_matrix, violated_points):
    cluster = []
    violated_cluster = []
    for vehicle_id in xrange(data.num_vehicles):
        index = routing.Start(vehicle_id)
        if data.transport_mode == "N1":
        	index = assignment.Value(routing.NextVar(index))
        route_dist = 0
        route_load = 0
        route = []
        while not routing.IsEnd(index):
            node_index = routing.IndexToNode(index)
            next_node_index = routing.IndexToNode(
                    assignment.Value(routing.NextVar(index)))
            route_dist += distance_matrix[node_index][next_node_index]
            route_load += data.parcels[node_index]            
            route.append([data.locations[node_index][0], data.locations[node_index][1]])
            index = assignment.Value(routing.NextVar(index))

        if data.transport_mode != "1N":
	        node_index = routing.IndexToNode(index)
	        route.append([data.locations[node_index][0], data.locations[node_index][1]])
        if (data.maximum_distance != 0 and route_dist > data.maximum_distance) or (route_load < data.min_parcels):
            violated_cluster.append(route)
        else:
            cluster.append(route)
    return {
        "cluster": cluster,
        "violated_points": violated_points,
        "violated_cluster": violated_cluster 
    }

def vrp(event, context):

    start_time = time.time()
    """Entry point of the program"""
    # Instantiate the data problem.
    try:
        locations = event["points"]
        min_parcels = event.get("min_parcels", 0)
        maximum_distance = event.get("max_distance", 0)
        num_vehicles = event["vehicle_num"]
        min_vehicles = event.get("min_vehicles", False)
        max_parcels = event.get("max_parcels", 20)
        transport_mode = event["transport_mode"]
        distance_calculation = event.get("distance_calculation", "VINCENTY")
    except KeyError as e:
        print("Missing required input: " + str(e))
        cluster = {"title": "Missing required input: " + str(e)}
        return return_lambda_gateway_response(400, cluster)

    if min_parcels < 0 or maximum_distance < 0 or num_vehicles < 0 or max_parcels < 0:
        cluster = {"title": "Numerical input cannot be negative"}
        return return_lambda_gateway_response(400, cluster)

    if transport_mode != "1N" and transport_mode != "N1" and transport_mode != "1N1":
        cluster = {"title": "Invalid transport_mode"}
        return return_lambda_gateway_response(400, cluster)

    if distance_calculation != "VINCENTY" and distance_calculation != "OSRM":
        cluster = {"title": "Invalid distance_calculation"}
        return return_lambda_gateway_response(400, cluster)

    if distance_calculation == "OSRM" and len(locations) > 100:
        cluster = {"title": "Bad request: OSRM cannot be used with more than 100 points"}
        return return_lambda_gateway_response(400, cluster)

    data = data_problem.DataProblem(locations, num_vehicles, min_parcels, 
        max_parcels, maximum_distance, transport_mode, distance_calculation)
    
    # Define weight of each edge
    distance = pickup_constraints.CreateDistanceEvaluator(data)
    distance_matrix = distance.get_distance_matrix()
    distance_evaluator = distance.distance_evaluator
    print("Violated points: " + str(distance.get_violated_points))

    if len(data.locations) <= 1:
    	cluster = {
	    	"cluster": [],
	        "violated_points": distance.get_violated_points,
	        "violated_cluster": []
    	}
    	return return_lambda_gateway_response(200, cluster)

    # Create Routing Model
    routing = pywrapcp.RoutingModel(data.num_locations, data.num_vehicles, data.depot)
    
    if data.num_locations > 100:
        routing.SetArcCostEvaluatorOfAllVehicles(distance.cluster_distance_evaluator)
    else:
        routing.SetArcCostEvaluatorOfAllVehicles(distance_evaluator)

    if maximum_distance != 0:
        pickup_constraints.add_distance_dimension(routing, data, distance_evaluator)
    # still need when min_parcels = 0 because we have max_parcels
    parcels_evaluator = pickup_constraints.CreateParcelsEvaluator(data).parcels_evaluator
    pickup_constraints.add_parcels_constraints(routing, data, parcels_evaluator)

    # Setting first solution heuristic (cheapest addition).
    search_parameters = pywrapcp.RoutingModel.DefaultSearchParameters()
    search_parameters.time_limit_ms = 25000
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PATH_MOST_CONSTRAINED_ARC)

    #minimize the total number of vehicle
    if min_vehicles:
        if data.num_vehicles*data.min_parcels >= data.num_locations:
            routing.SetFixedCostOfAllVehicles(1000000)
        else:
            routing.SetFixedCostOfAllVehicles(10000)

    # Solve the problem.
    assignment = routing.SolveWithParameters(search_parameters)

    if assignment is None:
        print("change distance to soft constraint")
        print("\nThe program took " + str(time.time() - start_time) + " seconds to run")
        start_time = time.time()
        routing = pywrapcp.RoutingModel(data.num_locations, data.num_vehicles, data.depot)

        if data.num_locations > 100:
            routing.SetArcCostEvaluatorOfAllVehicles(distance.cluster_distance_evaluator)
        else:
            routing.SetArcCostEvaluatorOfAllVehicles(distance_evaluator)
        if maximum_distance != 0:
            pickup_constraints.add_distance_soft(routing, data, distance_evaluator)
        parcels_evaluator = pickup_constraints.CreateParcelsEvaluator(data).parcels_evaluator
        pickup_constraints.add_parcels_constraints(routing, data, parcels_evaluator)

        search_parameters = pywrapcp.RoutingModel.DefaultSearchParameters()
        search_parameters.time_limit_ms = 60000
        search_parameters.first_solution_strategy = (
            routing_enums_pb2.FirstSolutionStrategy.PATH_MOST_CONSTRAINED_ARC)
        if min_vehicles:
            if data.num_vehicles*data.min_parcels >= data.num_locations:
                routing.SetFixedCostOfAllVehicles(1000000)
            else:
                routing.SetFixedCostOfAllVehicles(100)
        assignment = routing.SolveWithParameters(search_parameters)

    if assignment is None:
        print("No solution found")
        cluster = "No solution found"
    else:
        cluster = get_routing_assignment(data, routing, assignment, distance_matrix, distance.get_violated_points)
        p = printer.ConsolePrinter(data, routing, assignment, distance_matrix)
        p.print()

    print("\nThe program took " + str(time.time() - start_time) + " seconds to run")

    return return_lambda_gateway_response(200, cluster)

########
# Main #
########
def main():
	event = test_20
	print(vrp(event, ""))

if __name__ == '__main__':
  main()